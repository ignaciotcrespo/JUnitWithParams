POM_NAME=JUnitWithParams
POM_ARTIFACT_ID=junitwithparams
POM_PACKAGING=aar
VERSION_NAME=1.0.6
VERSION_CODE=6
GROUP=com.github.ignaciotcrespo

POM_DESCRIPTION=Parameterised tests, it works with any Runner (Robolectric, String, Mockito, and more!)
POM_URL=https://github.com/ignaciotcrespo/junitwithparams
POM_SCM_URL=https://github.com/ignaciotcrespo/junitwithparams.git
POM_SCM_CONNECTION=https://github.com/ignaciotcrespo/junitwithparams.git
POM_SCM_DEV_CONNECTION=https://github.com/ignaciotcrespo/junitwithparams.git
POM_LICENCE_NAME=MIT License
POM_LICENCE_URL=http://www.opensource.org/licenses/mit-license.php
POM_LICENCE_DIST=repo
POM_DEVELOPER_ID=itcrespo
POM_DEVELOPER_NAME=Ignacio Tomas Crespo

NEXUS_USERNAME=itcrespo
# use command line, e.g. gradle clean uploadArchives -PNEXUS_PASSWORD=XXX -Psigning.password=XXX
# or set value in ~/.gradle/gradle.properties
#NEXUS_PASSWORD=

SNAPSHOT_REPOSITORY_URL=https://oss.sonatype.org/content/repositories/snapshots
RELEASE_REPOSITORY_URL=https://oss.sonatype.org/service/local/staging/deploy/maven2

signing.keyId=49BE6234
# use command line, e.g. gradle clean uploadArchives -PNEXUS_PASSWORD=XXX -Psigning.password=XXX
# or set value in ~/.gradle/gradle.properties
# signing.password=
# signing.secretKeyRingFile=
signing.secretKeyRingFile=./secring.gpg




#Enable daemon
org.gradle.daemon=true

# Find out the best heap size (Xmx2048m) for your project build. Just trial and error...
#org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8

# Modularise your project and enable parallel build
org.gradle.parallel=true

# Enable configure on demand.
org.gradle.configureondemand=true